import { FileMap, MoveTemplate, withCommon } from './types';

export const README = withCommon(`
# Empty Project (sui move new)

This template is identical to what \`sui move new\` generates.

Source: https://docs.sui.io/references/cli/client#sui-move-new
`);

function moveToml(pkg: string): string {
  return `
[package]
name = "${pkg}"
edition = "2024.beta" # edition = "legacy" to use legacy (pre-2024) Move
# license = ""           # e.g., "MIT", "GPL", "Apache 2.0"
# authors = ["..."]      # e.g., ["Joe Smith (joesmith@noemail.com)", "John Snow (johnsnow@noemail.com)"]

[dependencies]

# For remote import, use the \`{ git = "...", subdir = "...", rev = "..." }\`.
# Revision can be a branch, a tag, and a commit hash.
# MyRemotePackage = { git = "https://some.remote/host.git", subdir = "remote/path", rev = "main" }

# For local dependencies use \`local = path\`. Path is relative to the package root
# Local = { local = "../path/to" }

# To resolve a version conflict and force a specific version for dependency
# override use \`override = true\`
# Override = { local = "../conflicting/version", override = true }

[addresses]
${pkg} = "0x0"

# Named addresses will be accessible in Move as \`@name\`. They're also exported:
# for example, \`std = "0x1"\` is exported by the Standard Library.
# alice = "0xA11CE"

[dev-dependencies]
# The dev-dependencies section allows overriding dependencies for \`--test\` and
# \`--dev\` modes. You can introduce test-only dependencies here.
# Local = { local = "../path/to/dev-build" }

[dev-addresses]
# The dev-addresses section allows overwriting named addresses for the \`--test\`
# and \`--dev\` modes.
# alice = "0xB0B"
`.trim();
}

function files(pkg: string): FileMap {
  return {
    'Move.toml': moveToml(pkg),
    '.gitignore': `
build/*
.trace
.coverage*
`.trim(),
    [`sources/${pkg}.move`]: `
/*
/// Module: ${pkg}
module ${pkg}::${pkg};
*/

// For Move coding conventions, see
// https://docs.sui.io/concepts/sui-move-concepts/conventions
`.trim(),
    [`tests/${pkg}_tests.move`]: `
/*
#[test_only]
module ${pkg}::${pkg}_tests;
// uncomment this line to import the module
// use ${pkg}::${pkg};

const ENotImplemented: u64 = 0;

#[test]
fun test_${pkg}() {
    // pass
}

#[test, expected_failure(abort_code = ::${pkg}::${pkg}_tests::ENotImplemented)]
fun test_${pkg}_fail() {
    abort ENotImplemented
}
*/
`.trim(),

    'README.md': README,
  };
}

export const MoveTemplate_Empty: MoveTemplate = {
  id: 'sui_new',
  label: 'Empty (sui move new)',
  defaultName: 'my_project',
  description: 'Baseline Move package generated by `sui move new`.',
  detail:
    'Includes Move.toml, .gitignore, sources/<pkg>.move, and tests/<pkg>_tests.move with initial comments.',
  files,
};
